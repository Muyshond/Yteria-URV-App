"use strict";sap.ui.define(["sap/m/MessageToast","sap/ui/core/mvc/Controller","sap/ui/model/json/JSONModel","sap/ui/export/Spreadsheet"],function(e,t,s,o){"use strict";const n=t.extend("urvfrontend.controller.Overview",{onInit:function e(){},getUser:async function t(){const o=this.getView()?.byId("byUserId");const n=this.getView()?.byId("bygroup");const r=this.getView()?.byId("grouptable");const i=this.getView()?.byId("usertable");const l=this.getView()?.byId("UserID");const c=l.getValue();if(c===""){e.show("Please enter a valid ID");return}const a=this.getView()?.byId("select");const u=a.getSelectedItem();if(u.mProperties.key==="group"){i.setVisible(false);o.setVisible(false);const t=await this.getGroupByWord(c);console.log(t.value.length);if(t.value.length===0){e.show("There are no groups that include "+c);n.setVisible(false);r.setVisible(false);o.setVisible(false);i.setVisible(false);return}else if(t.value.length>1){let e=false;t.value.forEach(t=>{if(t.displayName===c){e=true}});console.log(e+" juist = ok");if(e){this.setGroup(c);r.setVisible(false);return}else{n.setVisible(false);r.setVisible(true);const e=new s({value:t.value});this.getView().setModel(e,"tablegroups")}}else if(t.value.length===1){console.log(t.value[0]);if(t.value[0]==="Group not found"){return}else if(t.value[0].displayName===c){this.setGroup(c);r.setVisible(false);return}else{n.setVisible(false);r.setVisible(true);const e=new s({value:t.value});this.getView().setModel(e,"tablegroups")}}}else if(u.mProperties.key==="user"){r.setVisible(false);n.setVisible(false);const t=await this.getUserByWord(c);console.log(t);if(t.value.length===0){e.show("There are no Users that include "+c);n.setVisible(false);r.setVisible(false);o.setVisible(false);i.setVisible(false);return}else if(t.value.length>1){let e=false;t.value.forEach(t=>{if(t.id===c){e=true}});console.log(e+" juist = ok");if(e){this.setUser(c);i.setVisible(false);return}else{o.setVisible(false);i.setVisible(true);const e=new s({value:t.value});this.getView().setModel(e,"tableusers")}}else if(t.value.length===1){console.log(t.value[0]);if(t.value[0]==="User not found"){e.show("user not found");return}else if(t.value[0].id===c){this.setUser(c);i.setVisible(false);return}else{o.setVisible(false);i.setVisible(true);const e=new s({value:t.value});this.getView().setModel(e,"tableusers")}}}},setUser:async function e(t){const s=this.getView()?.byId("byUserId");const o=this.getView()?.byId("bygroup");const n=await this.getIASUser(t);const r=n[0];this.setUserDetails(r);const i=await this.getUserCollectionsViaGroup(r);const l=Object.entries(i).map(e=>{let[t,s]=e;return{group:t,roleCollections:s}});const c={};for(const{group:e,roleCollections:t}of l){c[e]={};for(const s of t){const t=await this.getRolecollectionRoles(s);const o=t?.value?.[0];const n=o?.roleReferences?.map(e=>e.name)||[];c[e][s]=n}this.setDataToTree(c);o.setVisible(false);s.setVisible(true)}this.setDataToTree2(c);o.setVisible(true);s.setVisible(false);return},setGroup:async function e(t){const o=await this.getGroup(t);console.log(o);const n=this.getView()?.byId("byUserId");const r=this.getView()?.byId("bygroup");this.setGroupDetails(o.value[0]);const i=o.value[0].members;if(i!==undefined){const e=new s({members:i});this.getView()?.setModel(e,"groupMembersModel")}const l={};const c=await this.getGroupRoles(o.value[0].displayName);for(const e of c){const t=await this.getRolecollectionRoles(e);const s=t?.value?.[0];const o=s?.roleReferences?.map(e=>e.name)||[];l[e]=o}this.setDataToTree2(l);r.setVisible(true);n.setVisible(false);return},getGroupRoles:async function e(t){const s=await this.getRoleCollections();const o=s?.value||[];const n=[];o.forEach(e=>{if(!e.groupReferences&&!e.samlAttributeAssignment){return}const s=[...(e.groupReferences||[]).map(e=>e.attributeValue),...(e.samlAttributeAssignment||[]).map(e=>e.attributeValue)];if(s.includes(t)){n.push(e.name)}});return n},getGroup:async function e(t){try{const e=this.getView()?.getModel();const s=e.bindContext(`/getGroupByName(...)`,undefined,{});s.setParameter("GroupName",t);const o=await s.execute().then(()=>{const e=s.getBoundContext();if(!e){return}const t=e.getObject();return t}).catch(e=>{console.error("Error fetching Group:",e)});return o}catch(e){console.error("Error:",e)}},getGroupByWord:async function e(t){try{const e=this.getView()?.getModel();const s=e.bindContext(`/getGroupByWord(...)`,undefined,{});s.setParameter("GroupName",t);const o=await s.execute().then(()=>{const e=s.getBoundContext();if(!e){return}const t=e.getObject();return t}).catch(e=>{console.error("Error fetching Group:",e)});return o}catch(e){console.error("Error catching groups:",e)}},getUserByWord:async function e(t){try{const e=this.getView()?.getModel();const s=e.bindContext(`/getUserByWord(...)`,undefined,{});s.setParameter("id",t);const o=await s.execute().then(()=>{const e=s.getBoundContext();if(!e){return}const t=e.getObject();return t}).catch(e=>{console.error("Error fetching Group:",e)});return o}catch(e){console.error("Error catching groups:",e)}},setDataToTree:function e(t){const o=Object.entries(t).map(e=>{let[t,s]=e;return{name:t,icon:"sap-icon://group",children:Object.entries(s).map(e=>{let[t,s]=e;return{name:t,icon:"sap-icon://manager",children:(s||[]).map(e=>({name:e,icon:"sap-icon://role"}))}})}});this.getView()?.setModel(new s({tree:o}),"TreeModel")},setDataToTree2:function e(t){const o=Object.entries(t).map(e=>{let[t,s]=e;return{name:t,icon:"sap-icon://manager",children:s.map(e=>({name:e,icon:"sap-icon://role"}))}});this.getView()?.setModel(new s({tree:o}),"TreeModel2")},setUserDetails:function e(t){let o=this.getView()?.getModel("userModel");if(!o){o=new s;this.getView()?.setModel(o,"userModel")}o.setData(t)},setGroupDetails:function e(t){let o=this.getView()?.getModel("groupModel");if(!o){o=new s;this.getView()?.setModel(o,"groupModel")}o.setData(t)},getUserCollectionsViaGroup:async function e(t){const s=t.groups.map(e=>e.display);const o=await this.getRoleCollections();const n=o?.value||[];const r={};s.forEach(e=>{r[e]=[]});n.forEach(e=>{if(!e.groupReferences&&!e.samlAttributeAssignment){return}const t=[...(e.groupReferences||[]).map(e=>e.attributeValue),...(e.samlAttributeAssignment||[]).map(e=>e.attributeValue)];s.forEach(s=>{if(t.includes(s)){r[s].push(e.name)}})});return r},getIASUser:async function e(t){try{const e=this.getView()?.getModel();const s=e.bindContext(`/getIASUser(...)`,undefined,{});s.setParameter("id",t);const o=s.execute().then(()=>{const e=s.getBoundContext();if(!e){return}const t=e.getObject();return t.value}).catch(e=>{console.error("Error fetching IAS User:",e)});return o}catch(e){console.error("Error :",e)}},getRoleCollections:async function e(){try{const e=this.getView()?.getModel();const t=e.bindContext(`/getRoleCollections(...)`,undefined,{});const s=t.execute().then(()=>{const e=t.getBoundContext();if(!e){return}const s=e.getObject();return s}).catch(e=>{console.error("Error fetching role collectons:",e)});return s}catch(e){console.error("Error:",e)}},getRolecollectionRoles:async function e(t){try{const e=this.getView()?.getModel();const s=e.bindContext(`/getRoleCollectionRoles(...)`,undefined,{});s.setParameter("roleCollectionName",t);const o=s.execute().then(()=>{const e=s.getBoundContext();if(!e){return}const t=e.getObject();return t}).catch(e=>{console.error("Error fetching role collecton roles:",e)});return o}catch(e){console.error("Error:",e)}},onSearch:function e(t){const s=t.getParameter("newValue")?.toLowerCase()||"";const o=this.byId("RoleTree");o.expandToLevel(999);const n=o.getItems();if(!o)return;if(!s){n.forEach(e=>e.setHighlight("None"));return}n.forEach(e=>{const t=e.getBindingContext("TreeModel");if(t){const n=o.indexOfItem(e);const r=t.getProperty("name").toLowerCase();if(r.includes(s)){console.log(r+s);e.setHighlight("Success")}else{e.setHighlight("None")}}})},onSearch2:function e(t){const s=t.getParameter("newValue")?.toLowerCase()||"";const o=this.byId("RoleTree2");o.expandToLevel(999);const n=o.getItems();if(!o)return;if(!s){n.forEach(e=>e.setHighlight("None"));return}n.forEach(e=>{const t=e.getBindingContext("TreeModel2");if(t){const n=o.indexOfItem(e);const r=t.getProperty("name").toLowerCase();if(r.includes(s)){console.log(r+s);e.setHighlight("Success")}else{e.setHighlight("None")}}})},onGroupPress:function e(t){const s=t.getParameter("listItem");const o=s.getBindingContext("tablegroups");const n=o.getObject();const r=n.displayName;this.setGroup(r)},onUserPress:function e(t){const s=t.getParameter("listItem");const o=s.getBindingContext("tableusers");const n=o.getObject();const r=n.id;console.log(r);this.setUser(r)},onExportToExcel:function e(t,s,n){const r=this.byId(t);const i=this.getView()?.getModel(s);const l=i.getProperty("/value");const c=r.getColumns().map((e,t)=>{const s=e.getHeader();return{label:s?.getText?.()||`Column ${t+1}`,property:r.getItems()[0]?.getCells()[t]?.getBinding("text")?.getPath()||""}});const a={workbook:{columns:c},dataSource:l,fileName:`${n}.xlsx`};const u=new o(a);u.build().finally(()=>{u.destroy()})},onExportUsers:function e(){this.onExportToExcel("usersTable","tableusers","Users")},onExportGroups:function e(){this.onExportToExcel("groupsTable2","tablegroups","Groups")},onExportGroupMembers:function e(){this.onExportToExcel("groupMembersTable","groupMembersModel","Group Members")}});return n});
//# sourceMappingURL=Overview.controller.js.map