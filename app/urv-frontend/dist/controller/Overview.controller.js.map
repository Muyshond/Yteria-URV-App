{"version":3,"file":"Overview.controller.js","names":["dataService","_interopRequireDefault","__dataService","exportService","__exportService","Overview","Controller","extend","onInit","_onInit","document","addEventListener","this","onKeyDown","bind","_onKeyDown","event","key","console","log","getUser","async","_getUser","userpanel","getView","byId","grouppanel","grouptable","usertable","userInput","userID","getValue","MessageToast","show","selectinput","selectedvalue","getSelectedItem","mProperties","setVisible","groups","getGroupByWord","value","length","exactMatch","forEach","group","displayName","setGroup","oJSONModel","JSONModel","setModel","users","getUserByWord","user","id","setUser","_setUser","getIASUser","userdata","setUserDetails","grouprolerelationship","getUserCollectionsViaGroup","formattedData","Object","entries","map","_ref","roleCollections","result","roleCollection","response","getRolecollectionRoles","roleCollectionData","roles","roleReferences","role","name","setDataToTree","setDataToTree2","_setGroup","getGroup","setGroupDetails","members","undefined","rolecolltions","getGroupRoles","_setDataToTree","data","treeformat","_ref2","groupName","icon","children","_ref3","roleCollectionName","tree","_setDataToTree2","_ref4","_setUserDetails","oModel","getModel","setData","_setGroupDetails","groupdata","_getUserCollectionsViaGroup","userGroups","display","roleCollectionsData","getRoleCollections","groupRoleCollections","groupReferences","samlAttributeAssignment","roleGroups","grp","attributeValue","saml","includes","push","onSearch","_onSearch","searchword","getParameter","toLowerCase","expandToLevel","items","getItems","item","setHighlight","context","getBindingContext","index","indexOfItem","getProperty","onSearch2","_onSearch2","onGroupPress","_onGroupPress","oSelectedItem","oContext","oGroupData","getObject","onUserPress","_onUserPress","oUserData","onExportUser","_onExportUser","oView","onExportGroup","_onExportGroup"],"sources":["Overview.controller.ts"],"sourcesContent":["import MessageToast from \"sap/m/MessageToast\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport { form } from \"sap/ui/layout/library\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport containsOrEquals from \"sap/ui/dom/containsOrEquals\";\nimport { foreach } from \"@sap/cds\";\nimport Spreadsheet from \"sap/ui/export/Spreadsheet\";\nimport testService from \"../service/testService\"; \nimport dataService from \"../service/dataService\"; \nimport exportService from \"../service/exportService\"; \n\n\n/**\n * @namespace urvfrontend.controller\n */\nexport default class Overview extends Controller {\n\n    /*eslint-disable @typescript-eslint/no-empty-function*/\n    public onInit(): void {\n        document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        if (event.key === \"Enter\") {\n            console.log(\"Pressed Enter\");\n            this.getUser();\n        }\n    }\n    \n    \n\n\n    public async getUser() {\n    \n\n        const userpanel = this.getView()?.byId(\"byUserId\") as sap.m.panel;\n        const grouppanel = this.getView()?.byId(\"bygroup\") as sap.m.panel;\n        const grouptable = this.getView()?.byId(\"grouptable\") as sap.m.panel;\n        const usertable = this.getView()?.byId(\"usertable\") as sap.m.panel;\n\n        const userInput = this.getView()?.byId(\"UserID\") as sap.m.Input;\n        const userID = userInput.getValue();\n        if(userID === \"\"){\n            MessageToast.show(\"Please enter a valid ID\");\n            return;\n        }\n        const selectinput = this.getView()?.byId(\"select\") as sap.m.select;\n        const selectedvalue = selectinput.getSelectedItem();\n        //ZOEK OP GROUP\n        if(selectedvalue.mProperties.key === \"group\"){\n            usertable.setVisible(false);\n            userpanel.setVisible(false)\n            const groups = await dataService.getGroupByWord(userID, this.getView());\n            console.log(groups.value.length)\n            if(groups.value.length === 0){\n                MessageToast.show(\"There are no groups that include \" + userID);\n                grouppanel.setVisible(false);\n                grouptable.setVisible(false);\n                userpanel.setVisible(false);\n                usertable.setVisible(false);\n                return;\n\n                //Kan meerdere in lijst zitten maar niet getoond worden omdat er altijd 2 inzitten => Group en Group 2.\n                //Group matches exact maar toch 2 in lijst.\n            } else if(groups.value.length > 1 ){\n                let exactMatch = false;\n    \n                groups.value.forEach((group: { displayName: string }) => {\n                    if (group.displayName === userID) {\n                        exactMatch = true;\n                    }\n                });\n\n                if(exactMatch){\n                    this.setGroup(userID);\n                    grouptable.setVisible(false);\n                    \n                    return;\n\n                }else{\n                    grouppanel.setVisible(false);\n                    grouptable.setVisible(true);\n                    const oJSONModel = new JSONModel({ value: groups.value });\n                    this.getView().setModel(oJSONModel, \"tablegroups\"); \n                }\n            \n               \n\n\n                //IN ORDE \n            } else if(groups.value.length === 1){\n                console.log(groups.value[0])\n                if(groups.value[0] === \"Group not found\"){\n                    return;\n                }\n                else if(groups.value[0].displayName === userID){\n                    this.setGroup(userID);\n                    grouptable.setVisible(false);\n                    return;\n                } else{\n                    grouppanel.setVisible(false);\n                    grouptable.setVisible(true);\n                    const oJSONModel = new JSONModel({ value: groups.value });\n                    this.getView().setModel(oJSONModel, \"tablegroups\");\n                }\n            }\n                \n        \n        \n\n        //ZOEK OP USER\n        } else if(selectedvalue.mProperties.key === \"user\"){\n            grouptable.setVisible(false);\n            grouppanel.setVisible(false);\n                \n            const users = await dataService.getUserByWord(userID, this.getView());\n            console.log(users)\n            if(users.value.length === 0){\n                MessageToast.show(\"There are no Users that include \" + userID);\n                grouppanel.setVisible(false);\n                grouptable.setVisible(false);\n                userpanel.setVisible(false);\n                usertable.setVisible(false);\n                return;\n            } else if(users.value.length > 1){\n                let exactMatch = false;\n    \n                users.value.forEach((user: { id: string }) => {\n                    if (user.id === userID) {\n                        exactMatch = true;\n                    }\n                });\n\n                if(exactMatch){\n                    this.setUser(userID);\n                    usertable.setVisible(false);\n                    return;\n                }else{\n                    userpanel.setVisible(false);\n                    usertable.setVisible(true);\n                    const oJSONModel = new JSONModel({ value: users.value });\n                    this.getView().setModel(oJSONModel, \"tableusers\"); \n                }\n\n            } else if (users.value.length === 1){\n                console.log(users.value[0])\n                if(users.value[0] === \"User not found\"){\n                    MessageToast.show(\"user not found\")\n                    return;\n                }\n                else if(users.value[0].id === userID){\n                    this.setUser(userID);\n                    usertable.setVisible(false);\n                    return;\n                } else{\n                    userpanel.setVisible(false);\n                    usertable.setVisible(true);\n                    const oJSONModel = new JSONModel({ value: users.value });\n                    this.getView().setModel(oJSONModel, \"tableusers\");\n                }\n                \n            }\n            \n        } \n    }\n    \n\n    public async setUser(userID: any){\n        const userpanel = this.getView()?.byId(\"byUserId\") as sap.m.panel;\n        const grouppanel = this.getView()?.byId(\"bygroup\") as sap.m.panel;\n        \n        const user: any = await dataService.getIASUser(userID, this.getView());\n            console.log(user)\n            const userdata = user[0]\n            this.setUserDetails(userdata);\n            const grouprolerelationship = await this.getUserCollectionsViaGroup(userdata)\n            const formattedData = Object.entries(grouprolerelationship).map(([group, value]) => ({\n                group, \n                roleCollections: value\n            }));\n            const result: any = {}\n            for (const { group, roleCollections } of formattedData) {\n                result[group] = {}; \n        \n                for (const roleCollection of roleCollections) {\n                    const response = await dataService.getRolecollectionRoles(roleCollection, this.getView()); \n                    const roleCollectionData = response?.value?.[0]; \n                    const roles = roleCollectionData?.roleReferences?.map((role: any) => role.name) || [];\n    \n                    result[group][roleCollection] = roles;\n            }\n            const oJSONModel = new JSONModel({ value: result });\n            this.getView().setModel(oJSONModel, \"groupdetails\");\n\n            this.setDataToTree(result);\n            grouppanel.setVisible(false);\n            userpanel.setVisible(true);\n        }   \n\n        \n        \n       \n        this.setDataToTree2(result);\n        grouppanel.setVisible(true);\n        userpanel.setVisible(false);\n        return;\n    }\n\n    public async setGroup(userID: any){\n\n        const group = await dataService.getGroup(userID, this.getView())\n        console.log(group)\n                const userpanel = this.getView()?.byId(\"byUserId\") as sap.m.panel;\n        const grouppanel = this.getView()?.byId(\"bygroup\") as sap.m.panel;\n\n        this.setGroupDetails(group.value[0]);\n        const members = group.value[0].members;\n        if(members !== undefined){\n            const oJSONModel = new JSONModel({ members });\n            this.getView()?.setModel(oJSONModel, \"groupMembersModel\");\n            \n        }\n        const result: any = {}\n        const rolecolltions = await dataService.getGroupRoles(group.value[0].displayName, this.getView());\n        for (const roleCollection of rolecolltions) {\n            const response = await dataService.getRolecollectionRoles(roleCollection, this.getView()); \n            const roleCollectionData = response?.value?.[0]; \n            const roles = roleCollectionData?.roleReferences?.map((role: any) => role.name) || [];\n\n            result[roleCollection] = roles;\n        }\n        \n        const oJSONModel = new JSONModel({ value: result });\n        this.getView().setModel(oJSONModel, \"rolecollectiondetails\");   \n\n\n\n        this.setDataToTree2(result);\n        grouppanel.setVisible(true);\n        userpanel.setVisible(false);\n        return;\n    }\n\n\n    public setDataToTree(data: any) {\n        const treeformat = Object.entries(data).map(([groupName, roleCollections]) => ({\n            name: groupName,\n            icon: \"sap-icon://group\", \n            children: Object.entries(roleCollections as Record<string, string[]>).map(([roleCollectionName, roles]) => ({\n                name: roleCollectionName,\n                icon: \"sap-icon://manager\",  \n                children: (roles || []).map((role: string) => ({ \n                    name: role,\n                    icon: \"sap-icon://role\"  \n                }))\n            }))\n        }));\n        \n        this.getView()?.setModel(new JSONModel({ tree: treeformat }), \"TreeModel\");\n    }\n\n    public setDataToTree2(data: Record<string, string[]>) {\n        const treeformat = Object.entries(data).map(([roleCollectionName, roles]) => ({\n            name: roleCollectionName,\n            icon: \"sap-icon://manager\",\n            children: roles.map((role: string) => ({\n                name: role,\n                icon: \"sap-icon://role\"\n            }))\n        }));\n\n        this.getView()?.setModel(new JSONModel({ tree: treeformat }), \"TreeModel2\");\n    }\n\n    public setUserDetails(userdata: any) {\n        let oModel = this.getView()?.getModel(\"userModel\") as JSONModel;\n        if (!oModel) {\n            oModel = new JSONModel();\n            this.getView()?.setModel(oModel, \"userModel\");\n        }\n        oModel.setData(userdata);\n        console.log(userdata)\n    }\n\n    public setGroupDetails(groupdata: any) {\n        let oModel = this.getView()?.getModel(\"groupModel\") as JSONModel;\n        if (!oModel) {\n            oModel = new JSONModel();\n            this.getView()?.setModel(oModel, \"groupModel\");\n        }\n        oModel.setData(groupdata);\n    }\n\n\n    public async getUserCollectionsViaGroup(user: any) {\n        const userGroups = user.groups.map((group: any) => group.display);\n        const roleCollectionsData = await dataService.getRoleCollections(this.getView());\n        const roleCollections = roleCollectionsData?.value || [];\n        const groupRoleCollections: Record<string, string[]> = {};\n\n        userGroups.forEach((group: any) => {\n            groupRoleCollections[group] = [];\n        });\n\n        roleCollections.forEach((roleCollection: any) => {\n            if (!roleCollection.groupReferences && !roleCollection.samlAttributeAssignment) {\n                return;\n            }\n            const roleGroups = [\n                ...(roleCollection.groupReferences || []).map((grp: any) => grp.attributeValue),\n                ...(roleCollection.samlAttributeAssignment || []).map((saml: any) => saml.attributeValue)\n            ];\n            userGroups.forEach((group: any) => {\n                if (roleGroups.includes(group)) {\n                    groupRoleCollections[group].push(roleCollection.name);\n                }\n            });\n        });\n        return groupRoleCollections\n    }\n\n\n\n\n\n\n\n\n    onSearch(event: sap.ui.base.Event): void {\n        const searchword: string = event.getParameter(\"newValue\")?.toLowerCase() || \"\";\n        const tree = this.byId(\"RoleTree\") as sap.m.Tree;\n        tree.expandToLevel(999); \n\n        const items = tree.getItems();\n        if (!tree) return;\n        if (!searchword) {\n            items.forEach((item: any) => item.setHighlight(\"None\"));\n            return;\n        }\n        items.forEach((item: any) => {\n            const context = item.getBindingContext(\"TreeModel\");\n            if (context) {\n                const index = tree.indexOfItem(item);\n                const name: string = context.getProperty(\"name\").toLowerCase();\n                if (name.includes(searchword)) {\n                    console.log(name + searchword)\n                    item.setHighlight(\"Success\")  \n                }else{\n\n                    item.setHighlight(\"None\");\n                    //tree.collapse(index);\n                }\n            }\n        });\n    }\n\n    onSearch2(event: sap.ui.base.Event): void {\n        const searchword: string = event.getParameter(\"newValue\")?.toLowerCase() || \"\";\n        const tree = this.byId(\"RoleTree2\") as sap.m.Tree;\n        tree.expandToLevel(999); \n        const items = tree.getItems();\n        if (!tree) return;\n        if (!searchword) {\n            items.forEach((item: any) => item.setHighlight(\"None\"));\n            return;\n        }\n        items.forEach((item: any) => {\n            const context = item.getBindingContext(\"TreeModel2\");\n            if (context) {\n                const index = tree.indexOfItem(item);\n                const name: string = context.getProperty(\"name\").toLowerCase();\n                if (name.includes(searchword)) {\n                    console.log(name + searchword)\n                    item.setHighlight(\"Success\")  \n                }else{\n\n                    item.setHighlight(\"None\");\n                    //tree.collapse(index);\n                }\n            }\n        });\n    }\n\n\n    onGroupPress(event: sap.ui.base.Event): void {\n        const oSelectedItem = event.getParameter(\"listItem\") as ColumnListItem; \n        const oContext = oSelectedItem.getBindingContext(\"tablegroups\"); \n        \n\n        const oGroupData = oContext.getObject() as { displayName: string }; \n        const groupName = oGroupData.displayName; \n\n        this.setGroup(groupName);\n\n        \n    }\n    onUserPress(event: sap.ui.base.Event): void {\n        const oSelectedItem = event.getParameter(\"listItem\") as ColumnListItem; \n        const oContext = oSelectedItem.getBindingContext(\"tableusers\"); \n        \n\n        const oUserData = oContext.getObject() as { id: string }; \n        const userID = oUserData.id; \n        console.log(userID)\n        this.setUser(userID);\n    }\n\n    public onExportUser(): void {\n        const oView = this.getView();\n        exportService.onExportUser(oView);\n        \n    }\n\n\n\n    public onExportGroup(): void {\n        const oView = this.getView();\n        exportService.onExportGroup(oView);\n        \n    }\n    \n\n}"],"mappings":"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","ignoreList":[]}